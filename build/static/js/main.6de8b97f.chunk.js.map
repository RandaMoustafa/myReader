{"version":3,"sources":["component/search.js","component/book.js","component/shelf.js","BooksAPI.js","views/home.js","views/searchPage.js","App.js","index.js"],"names":["Search","react_default","a","createElement","className","react_router_dom","to","Book","_ref","books","updatedBook","style","width","height","backgroundImage","concat","imageLinks","thumbnail","value","shelf","onChange","e","target","disabled","title","authors","Shelf","props","name","map","key","component_book","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","update","book","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","Home","state","BookAPI","_this","setState","s","filter","b","_this2","this","console","log","component_shelf","component_search","Component","SearchPage","query","results","updateQuery","searchHandler","_this3","undefined","trim","error","forEach","f","_this4","type","placeholder","proptypes","PropTypes","func","isRequired","BooksApp","showSearchPage","react_router","exact","path","render","home","searchPage","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6de8b97f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Search(){\r\n    \r\n        return(\r\n            <div className=\"open-search\">\r\n            <Link to='/search' className=\"add-button\">Add a book</Link>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Book({books, updatedBook}){\r\n        return(\r\n            <div>\r\n            <li>\r\n    <div className=\"book\">\r\n    <div className=\"book-top\">\r\n        <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(\"${books.imageLinks && books.imageLinks.thumbnail}\")` }}></div>\r\n        <div className=\"book-shelf-changer\" >\r\n        <select value={books.shelf} onChange={(e)=>{updatedBook(books , e.target.value)}}>\r\n            <option value=\"move\" disabled>Move to...</option>\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n        </select>\r\n        </div>\r\n    </div>\r\n    <div className=\"book-title\">{books.title}</div>\r\n    <div className=\"book-authors\">{books.authors && books.authors[0]}</div>\r\n    </div>\r\n</li>\r\n\r\n</div>\r\n        );\r\n    \r\n}\r\n\r\nBook.propTypes ={\r\n    books : PropTypes.object.isRequired,\r\n    updatedBook : PropTypes.func.isRequired,\r\n    thumbnail: PropTypes.string,\r\n    authors: PropTypes.array,\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.string\r\n}\r\n\r\nexport default Book;","import React from \"react\";\r\nimport Book from \"./book\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Shelf ( props ){\r\n        return(\r\n            <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{props.name}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {\r\n                        props.books.map((books , key)=>\r\n                        <Book updatedBook ={props.updatedBook} books={books} key={key}/>)\r\n                    }\r\n                </ol>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\nShelf.propTypes = {\r\n    updatedBook: PropTypes.func.isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    name : PropTypes.string.isRequired\r\n}\r\nexport default Shelf;","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, {Component } from \"react\";\r\nimport Search from \"../component/search\";\r\nimport Shelf from \"../component/shelf\";\r\nimport * as BookAPI from '../BooksAPI';\r\n \r\n\r\nclass Home extends Component{\r\n    state = {\r\n        books : [],\r\n    };\r\n    componentDidMount(){\r\n        BookAPI.getAll().then((books)=>{\r\n            this.setState({books : books});\r\n            console.log(books);\r\n        })\r\n    }\r\n    updatedBook =(book , shelf)=>{\r\n        BookAPI.update(book , shelf).then(res =>{\r\n            book.shelf = shelf;\r\n            this.setState(s => ({\r\n                books : s.books.filter(b=> b.id !== book.id).concat([book])\r\n            }));\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n                <h1>MyReads</h1>\r\n                </div>\r\n            <div className=\"list-books-content\">\r\n                \r\n                <Shelf updatedBook ={this.updatedBook} name=\"currently Reading\" books={this.state.books.filter(b => b.shelf === \"currentlyReading\")}/>\r\n                <Shelf updatedBook ={this.updatedBook} name=\"want To Read\" books={this.state.books.filter(b => b.shelf === \"wantToRead\")}/>\r\n                <Shelf updatedBook ={this.updatedBook} name=\"Read\" books={this.state.books.filter(b => b.shelf === \"read\")}/>             \r\n            </div>\r\n            <Search/>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default Home;","import React, {Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as BookAPI from '../BooksAPI';\r\nimport Book from \"../component/book\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n//   function SearchPage(updatedBook,updateQuery){\r\n//     const [books,results,setApi] = useState();\r\n//     const [query] = useState(\"\");\r\n    \r\n    \r\n\r\n//     useEffect(()=>{BookAPI.getAll().then((books)=>{setApi(books);})},[]);\r\n\r\n//             updateQuery = (query)=>{\r\n//                 setApi({\r\n//                     query : query\r\n//                 } ,\r\n//                     searchHandler);\r\n//             }\r\n//             function searchHandler(){\r\n//                 if(query === '' || query === undefined){\r\n//                     return setApi({results: []});\r\n//                 }\r\n//                 BookAPI.search(query.trim())\r\n//                 .then(res=> {\r\n//                     if(res.error){\r\n//                         return setApi({results: []})\r\n//                     }else{\r\n//                         res.forEach(b=>{\r\n//                             let f = books.filter(book=> book.id === b.id);\r\n//                             if(f[0]){\r\n//                                 b.shelf = f.shelf;\r\n//                             }\r\n//                             return setApi({results: res});\r\n//                         });\r\n//                     }\r\n\r\n\r\n//                 }\r\n                \r\n//                 )\r\n//             }\r\n\r\n//     updatedBook =(book , shelf)=>{\r\n//         BookAPI.update(book , shelf).then(res =>{\r\n//             book.shelf = shelf;\r\n//             setApi(s => ({\r\n//                 books : s.books.filter(b=> b.id !== book.id).concat([book])\r\n//             }));\r\n//         });\r\n//     }\r\n\r\n\r\n\r\n\r\n//         return(\r\n//             <div className=\"search-books\">\r\n//             <div className=\"search-books-bar\">\r\n//                 <Link to='/' className=\"close-search\" >Close</Link>\r\n//                 <div className=\"search-books-input-wrapper\">\r\n//                 <input type=\"text\" placeholder=\"Search by title or author\" value={query}\r\n//                 onChange={(e)=> {updateQuery(e.target.value)}}/>\r\n\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"search-books-results\">\r\n//                 <ol className=\"books-grid\">\r\n//                     {results.map((books , key) => <Book updatedBook ={updatedBook} books={books} key={key} />)}\r\n//                 </ol>\r\n//             </div>\r\n//             </div>\r\n//         );\r\n\r\n// }\r\n// SearchPage.proptypes ={\r\n//     updatedBook: PropTypes.func.isRequired\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SearchPage extends Component{\r\n    state = {\r\n        books: [],\r\n        query : \"\",\r\n        results : []\r\n    }\r\n    componentDidMount(){\r\n        BookAPI.getAll().then((books)=>{\r\n            this.setState({books : books});\r\n        })\r\n            }\r\n\r\n            updateQuery = (query)=>{\r\n                this.setState({\r\n                    query : query\r\n                } ,\r\n                    this.searchHandler);\r\n            }\r\n            searchHandler(){\r\n                if(this.state.query === '' || this.state.query === undefined){\r\n                    return this.setState({results: []});\r\n                }\r\n                BookAPI.search(this.state.query.trim())\r\n                .then(res=> {\r\n                    if(res.error){\r\n                        return this.setState({results: []})\r\n                    }else{\r\n                        res.forEach(b=>{\r\n                            let f = this.state.books.filter(book=> book.id === b.id);\r\n                            if(f[0]){\r\n                                b.shelf = f.shelf;\r\n                            }\r\n                            return this.setState({results: res});\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n                \r\n                )\r\n            }\r\n    updatedBook =(book , shelf)=>{\r\n        BookAPI.update(book , shelf).then(res =>{\r\n            book.shelf = shelf;\r\n            this.setState(s => ({\r\n                books : s.books.filter(b=> b.id !== book.id).concat([book])\r\n            }));\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n                <Link to='/' className=\"close-search\" >Close</Link>\r\n                <div className=\"search-books-input-wrapper\">\r\n                <input type=\"text\" placeholder=\"Search by title or author\" value={this.state.query}\r\n                onChange={(e)=> {this.updateQuery(e.target.value)}}/>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n                <ol className=\"books-grid\">\r\n                    {this.state.results.map((books , key) => <Book updatedBook ={this.updatedBook} books={books} key={key} />)}\r\n                </ol>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSearchPage.proptypes ={\r\n    updatedBook: PropTypes.func.isRequired\r\n}\r\nexport default SearchPage;\r\n\r\n","import React from 'react'\n// import * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport { Switch, Route } from 'react-router';\nimport Home from './views/home';\nimport SearchPage from './views/searchPage';\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    showSearchPage: false\n  }\n \n\n  render() {\n    return (\n      <div className=\"app\">\n        {/* Make a Rout with React Router */}\n        <Switch>\n          <Route exact path='/' render={()=>(<Home/>)} />\n          <Route path='/search' render={()=>(<SearchPage/>)}/>\n          </Switch>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>,\n<App />,\n</BrowserRouter>,\n document.getElementById('root'));\n"],"sourceRoot":""}